
stages:
  - test # this checks the viability of the code
  - docdata # this builds stuff and assets for the documentation
  - documentation # this builds and deploys the actual documentation
  - test-compat # this runs many additional compatibility tests

variables:
  GIT_STRATEGY: clone
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

#
# Predefined conditions for triggering jobs
#

.global_on_check_incoming_code: &global_on_check_incoming_code
  rules:
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"

.global_on_build_doc: &global_on_build_doc
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG =~ /^v/

.global_on_full_tests: &global_on_full_tests
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_TAG =~ /^v/

.global_on_compat_tests: &global_on_compat_tests
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

#
# Test environment & platform settings
#

.global_env_julia15: &global_env_julia15
  variables:
    JULIA_VER: "v1.5.3"

.global_env_julia16: &global_env_julia16
  variables:
    JULIA_VER: "v1.6.0"

.global_env_linux: &global_env_linux
  tags:
    - slave01
  script:
    - $ARTENOLIS_SOFT_PATH/julia/$JULIA_VER/bin/julia --inline=yes --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'

.global_env_win: &global_env_win
  script:
    - $global:LASTEXITCODE = 0 # Note the global prefix.
    - Invoke-Expression $Env:ARTENOLIS_SOFT_PATH"\julia\"$Env:JULIA_VER"\bin\julia" --inline=yes --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'
    - exit $LASTEXITCODE

.global_env_win8: &global_env_win8
  tags:
    - windows8
  <<: *global_env_win

.global_env_win10: &global_env_win10
  tags:
    - windows10
  <<: *global_env_win

.global_env_mac: &global_env_mac
  tags:
    - mac
  script:
    - $ARTENOLIS_SOFT_PATH/julia/$JULIA_VER/Contents/Resources/julia/bin/julia --inline=yes --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'

#
# TESTS
#
# The "basic" required test that gets triggered for the basic testing, runs in
# any available docker and current julia
#

docker:julia1.6:
  stage: test
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    - julia --check-bounds=yes --inline=yes --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
  after_script:
    - julia --project=test/coverage test/coverage/coverage-summary.jl
  <<: *global_on_check_incoming_code

#
# The required compatibility test to pass on branches&tags before the docs get
# built & deployed
#

linux:julia1.5:
  stage: test
  <<: *global_on_full_tests
  <<: *global_env_julia15
  <<: *global_env_linux

linux:julia1.6:
  stage: test
  <<: *global_on_full_tests
  <<: *global_env_julia16
  <<: *global_env_linux

#
# Additional platform&environment compatibility tests
#

windows8:julia1.5:
  stage: test-compat
  <<: *global_on_compat_tests
  <<: *global_env_julia15
  <<: *global_env_win8

windows8:julia1.6:
  stage: test-compat
  <<: *global_on_compat_tests
  <<: *global_env_julia16
  <<: *global_env_win8

windows10:julia1.5:
  stage: test-compat
  <<: *global_on_compat_tests
  <<: *global_env_julia15
  <<: *global_env_win10

windows10:julia1.6:
  stage: test-compat
  <<: *global_on_compat_tests
  <<: *global_env_julia16
  <<: *global_env_win10

mac:julia1.5:
  stage: test-compat
  <<: *global_on_compat_tests
  <<: *global_env_julia15
  <<: *global_env_mac

mac:julia1.6:
  stage: test-compat
  <<: *global_on_compat_tests
  <<: *global_env_julia16
  <<: *global_env_mac

#
# Code format checker for pull-requests
#

format:
  stage: test
  image: docker:19.03.13
  tags:
    - privileged
  services:
    - name: docker:19.03.13-dind
      command: ["--tls=false", "--mtu=1458", "--registry-mirror", "https://docker-registry.lcsb.uni.lu"]
  before_script:
    - docker login -u $CI_USER_NAME -p $GITLAB_ACCESS_TOKEN $CI_REGISTRY
  script:
    - |
      docker run -v "$PWD":/project $CI_REGISTRY/r3/docker/julia-custom julia -e 'using JuliaFormatter; format("/project", verbose=true);'
    - |
      if [ `docker run -i -v "$PWD":/git alpine/git status -s | wc -l` -ne 0 ] ; then
        GITHUB_COMMENT=":red_square: &nbsp;Commit ${CI_COMMIT_SHORT_SHA} requires formatting!\
      "$'\n\n'"Required formatting changes summary:\
      "$'\n```\n'"`docker run -i -v \"$PWD\":/git alpine/git diff --stat`"$'\n```'
      else
        GITHUB_COMMENT=":green_circle: &nbsp;Commit ${CI_COMMIT_SHORT_SHA} is formatted properly."
      fi
    - |
      export GITHUB_TOKEN="${GITHUB_ACCESS_TOKEN_FORMATTER}"
      export GITHUB_OWNER="lcsb-biocore"
      export GITHUB_REPO="cobrexa.jl"
      export GITHUB_COMMENT_TYPE=pr
      export GITHUB_PR_ISSUE_NUMBER="${CI_EXTERNAL_PULL_REQUEST_IID}"
      export GITHUB_COMMENT_FORMAT=""
      export GITHUB_COMMENT
    - |
      docker run -i --rm \
            -e GITHUB_TOKEN \
            -e GITHUB_OWNER \
            -e GITHUB_REPO \
            -e GITHUB_COMMENT_TYPE \
            -e GITHUB_PR_ISSUE_NUMBER \
            -e GITHUB_COMMENT_FORMAT \
            -e GITHUB_COMMENT \
            cloudposse/github-commenter
  <<: *global_on_check_incoming_code

#
# Development history gif built with gource
#

docdata:gource:
  stage: docdata
  needs: [] # allow faster start
  image: docker:19.03.13
  tags:
    - privileged
  services:
    - name: docker:19.03.13-dind
      command: ["--tls=false", "--mtu=1458", "--registry-mirror", "https://docker-registry.lcsb.uni.lu"]
  before_script:
    - docker login -u $CI_USER_NAME -p $GITLAB_ACCESS_TOKEN $CI_REGISTRY
  script:
    - docker run -v "$PWD":/visualization $CI_REGISTRY/r3/docker/gource
  artifacts:
    paths: ['output.gif']
  <<: *global_on_build_doc

#
# Run documentation tests
#

doc-tests:julia1.6:
  stage: test
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    - julia --project=@. -e 'import Pkg; Pkg.instantiate();'
    - julia --project=@. --color=yes test/doctests.jl
  <<: *global_on_full_tests

#
# Build and deploy the documentation
#

pages:
  stage: documentation
  dependencies:
    - docdata:gource
      # Note: This dependency is also implied by the stage ordering, but let's
      # be sure. As of Nov 2021, the assets are not used directly, but referred
      # to externally from the docs.
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    # resolve and build packages from the docs/Project.toml file
    - julia --project=docs -e 'using Pkg; Pkg.resolve(); Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate();'

    # deploy doc (the without git history)
    - julia --project=docs --color=yes docs/make.jl

    # move to the directory picked up by Gitlab pages (with git history)
    - mv docs/build public
  artifacts:
    paths:
      - public
  <<: *global_on_build_doc

#
# Trigger the test pipeline in external repo
#

trigger:
  stage: test
  image: curlimages/curl
  tags:
    - privileged
  script:
    - curl --silent --output /dev/null -X POST -F token=$EXTERNAL_REPO_TOKEN -F ref=$EXTERNAL_REPO_BRANCH $EXTERNAL_REPO
  <<: *global_on_full_tests
