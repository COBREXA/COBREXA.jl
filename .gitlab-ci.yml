
stages:
  - test # this checks the viability of the code
  - assets # this builds assets to be included in documentation and distribution binaries
  - documentation # this processes the documentation
  - test-compat # this runs many additional compatibility tests

variables:
  GIT_STRATEGY: clone
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  APPTAINER_DOCKER_TAG: "v3.9.4"
  DOCKER_TAG: "lcsbbiocore/cobrexa.jl"

#
# Predefined conditions for triggering jobs
#

.global_trigger_pull_request: &global_trigger_pull_request
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      when: never
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"

.global_trigger_build_doc: &global_trigger_build_doc
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "master" && $CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME == "develop"
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_TAG =~ /^v/

.global_trigger_full_tests: &global_trigger_full_tests
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_TAG =~ /^v/

.global_trigger_compat_tests: &global_trigger_compat_tests
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "master"

.global_trigger_test_containers: &global_trigger_test_containers
  rules:
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == "develop"

.global_trigger_release_containers: &global_trigger_release_containers
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/

#
# Test environment & platform settings
#

.global_dind: &global_dind
  image: docker:20.10.12
  tags:
    - privileged
  services:
    - name: docker:20.10.12-dind
      command: ["--tls=false", "--mtu=1458", "--registry-mirror", "https://docker-registry.lcsb.uni.lu"]
  before_script:
    - docker login -u $CI_USER_NAME -p $GITLAB_ACCESS_TOKEN $CI_REGISTRY

.global_julia17: &global_julia17
  variables:
    JULIA_VER: "v1.7.0"

.global_julia16: &global_julia16
  variables:
    JULIA_VER: "v1.6.0"

.global_env_linux: &global_env_linux
  script:
    - $ARTENOLIS_SOFT_PATH/julia/$JULIA_VER/bin/julia --inline=yes --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'

.global_env_win: &global_env_win
  script:
    - $global:LASTEXITCODE = 0 # Note the global prefix.
    - Invoke-Expression $Env:ARTENOLIS_SOFT_PATH"\julia\"$Env:JULIA_VER"\bin\julia --inline=yes --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'"
    - exit $LASTEXITCODE

.global_env_win8: &global_env_win8
  tags:
    - windows8
  <<: *global_env_win

.global_env_win10: &global_env_win10
  tags:
    - windows10
  <<: *global_env_win

.global_env_mac: &global_env_mac
  tags:
    - mac
  script:
    - $ARTENOLIS_SOFT_PATH/julia/$JULIA_VER/Contents/Resources/julia/bin/julia --inline=yes --check-bounds=yes --color=yes --project=@. -e 'import Pkg; Pkg.test(; coverage = true)'

.global_build_apptainer: &global_build_apptainer
  stage: assets
  image:
    name: "quay.io/singularity/singularity:$APPTAINER_DOCKER_TAG"
    # the image entrypoint is the singularity binary by default
    entrypoint: ["/bin/sh", "-c"]
  tags:
    - privileged
  script: singularity build cobrexa.sif cobrexa.def

#
# TESTS
#
# The "basic" required test that gets triggered for the basic testing, runs in
# any available docker and current julia
#

docker:julia1.7:
  stage: test
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    - julia --check-bounds=yes --inline=yes --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
  after_script:
    - julia --project=test/coverage test/coverage/coverage-summary.jl
  <<: *global_trigger_pull_request

#
# The required compatibility test to pass on branches&tags before the docs get
# built & deployed
#

linux:julia1.7:
  stage: test
  tags:
    - slave01
  <<: *global_trigger_full_tests
  <<: *global_julia17
  <<: *global_env_linux

linux:julia1.6:
  stage: test
  tags:
    - slave02
  <<: *global_trigger_full_tests
  <<: *global_julia16
  <<: *global_env_linux

#
# Additional platform&environment compatibility tests
#

windows8:julia1.7:
  stage: test-compat
  <<: *global_trigger_compat_tests
  <<: *global_julia17
  <<: *global_env_win8

windows10:julia1.7:
  stage: test-compat
  <<: *global_trigger_compat_tests
  <<: *global_julia17
  <<: *global_env_win10

mac:julia1.7:
  stage: test-compat
  <<: *global_trigger_compat_tests
  <<: *global_julia17
  <<: *global_env_mac

windows8:julia1.6:
  stage: test-compat
  <<: *global_trigger_compat_tests
  <<: *global_julia16
  <<: *global_env_win8

windows10:julia1.6:
  stage: test-compat
  <<: *global_trigger_compat_tests
  <<: *global_julia16
  <<: *global_env_win10

mac:julia1.6:
  stage: test-compat
  <<: *global_trigger_compat_tests
  <<: *global_julia16
  <<: *global_env_mac

#
# CODE FORMAT CHECKER
#

format:
  stage: test
  script:
    - |
      docker run -v "$PWD":/project $CI_REGISTRY/r3/docker/julia-custom julia -e 'using JuliaFormatter; format("/project", verbose=true);'
    - |
      if [ `docker run -i -v "$PWD":/git alpine/git status -s | wc -l` -ne 0 ] ; then
        GITHUB_COMMENT=":red_square: &nbsp;Commit ${CI_COMMIT_SHORT_SHA} requires formatting!\
      "$'\n\n'"Required formatting changes summary:\
      "$'\n```\n'"`docker run -i -v \"$PWD\":/git alpine/git diff --stat`"$'\n```'
      else
        GITHUB_COMMENT=":green_circle: &nbsp;Commit ${CI_COMMIT_SHORT_SHA} is formatted properly."
      fi
    - |
      export GITHUB_TOKEN="${GITHUB_ACCESS_TOKEN_FORMATTER}"
      export GITHUB_OWNER="lcsb-biocore"
      export GITHUB_REPO="cobrexa.jl"
      export GITHUB_COMMENT_TYPE=pr
      export GITHUB_PR_ISSUE_NUMBER="${CI_EXTERNAL_PULL_REQUEST_IID}"
      export GITHUB_COMMENT_FORMAT=""
      export GITHUB_COMMENT
    - |
      docker run -i --rm \
            -e GITHUB_TOKEN \
            -e GITHUB_OWNER \
            -e GITHUB_REPO \
            -e GITHUB_COMMENT_TYPE \
            -e GITHUB_PR_ISSUE_NUMBER \
            -e GITHUB_COMMENT_FORMAT \
            -e GITHUB_COMMENT \
            cloudposse/github-commenter
  <<: *global_dind
  <<: *global_trigger_pull_request

#
# ASSETS
#
# This builds the development history gif using gource, and some containers.
#

gource:
  stage: assets
  needs: [] # allow faster start
  script:
    - docker run -v "$PWD":/visualization $CI_REGISTRY/r3/docker/gource
  artifacts:
    paths: ['output.gif']
    expire_in: 1 year
  <<: *global_trigger_build_doc
  <<: *global_dind

apptainer-test:
  artifacts:
    paths:
      - cobrexa.sif
    expire_in: 1 week
  <<: *global_build_apptainer
  <<: *global_trigger_test_containers

apptainer-release:
  artifacts:
    paths:
      - cobrexa.sif
    expire_in: never
  <<: *global_build_apptainer
  <<: *global_trigger_release_containers

docker-test:
  script:
    - docker build -t "$DOCKER_TAG:testing" .
  <<: *global_trigger_test_containers #TODO enable later
  <<: *global_dind

docker-release:
  script:
    - docker build -t "$DOCKER_TAG:latest" .
    - docker tag "$DOCKER_TAG:latest" "$DOCKER_TAG:v1.2.2.d1" #TODO change to $CI_COMMIT_TAG later
    - docker login -u $DOCKER_IO_USER -p $DOCKER_IO_ACCESS_TOKEN
    - docker push "$DOCKER_TAG:latest"
    - docker push "$DOCKER_TAG:v1.2.2.d1" #TODO
  #<<: *global_trigger_release_containers
  <<: *global_dind

#
# DOCUMENTATION TESTS
#
# In pull requests, triggered after the tests succeed to avoid unnecessary
# double failure.  In normal branch testing, these get triggered with normal
# tests (the error should be visible ASAP). We avoid a separate stage to keep
# the pipeline parallelizable.
#

.global_doctests: &global_doctests
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    - julia --project=@. -e 'import Pkg; Pkg.instantiate();'
    - julia --project=@. --color=yes test/doctests.jl

doc-tests-pr:julia1.7:
  stage: documentation
  <<: *global_doctests
  <<: *global_trigger_pull_request

doc-tests:julia1.7:
  stage: test
  <<: *global_doctests
  <<: *global_trigger_full_tests

#
# DOCUMENTATION
#

pages:
  stage: documentation
  dependencies:
    - gource
      # Note: This dependency is also implied by the stage ordering, but let's
      # be sure. As of Nov 2021, the assets are not used directly, but referred
      # to externally from the docs.
  image: $CI_REGISTRY/r3/docker/julia-custom
  script:
    # resolve and build packages from the docs/Project.toml file
    - julia --project=docs -e 'using Pkg; Pkg.resolve(); Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate();'

    # build and deploy docs (this doesn't upload the gource animation asset)
    - julia --project=docs --color=yes docs/make.jl

    # move to the directory to be picked up by Gitlab pages (with assets)
    - mv docs/build public
  artifacts:
    paths:
      - public
  <<: *global_trigger_build_doc

#
# EXTERNAL REPOSITORIES
#
# This trigger the test pipeline in external repo as defined by gitlab
# variables.
#

trigger:
  stage: test-compat
  image: curlimages/curl
  tags:
    - privileged
  script:
    - curl --silent --output /dev/null -X POST -F token=$EXTERNAL_REPO_TOKEN -F ref=$EXTERNAL_REPO_BRANCH $EXTERNAL_REPO
  <<: *global_trigger_full_tests
